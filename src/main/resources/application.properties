server.port=8081

spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=bana
spring.datasource.password=press

# JPA/Hibernate에서 DDL(create, drop, alter) 문장을 자동으로 작성/실행.
# 스프링 부트 어플리케이션이 실행될 때 drop table을 실행하고 create table을 실행.
# -> 실제(현업) 동작중인 어플리케이션에서는 절대로 사용하면 안됨. 테스트 용도로만 사용.
# ddl-auto=none (기본값)으로 설정하면 create table을 실행하지 않음.
spring.jpa.hibernate.ddl-auto=update
# JPA/Hibernate\uC5D0\uC11C \uC790\uB3D9\uC73C\uB85C \uC0DD\uC131\uB418\uB294 SQL \uBB38\uC7A5\uC744 \uBCF4\uAE30\uC88B\uAC8C \uD3EC\uB9F7\uD305\uD574\uC11C \uB85C\uADF8\uB85C \uCD9C\uB825.
spring.jpa.properties.hibernate.format_sql=true

# JPA/Hibernate\uC5D0\uC11C \uC790\uB3D9\uC73C\uB85C \uC0DD\uC131\uB418\uB294 SQL \uBB38\uC7A5\uC744 \uC0C9\uC0C1\uC744 \uC785\uD600\uC11C \uCD9C\uB825.
spring.jpa.properties.hibernate.highlight_sql=true

# Hibernate\uC758 \uB85C\uADF8 \uB808\uBCA8\uC744 \uCD9C\uB825(trace < debug < info < error < fatal)
logging.level.org.hibernate.SQL=debug

# PreparedState\uC758 \uBC14\uC778\uB529 \uD30C\uB77C\uBBF8\uD130 \uC21C\uC11C/\uAC12\uC744 \uB85C\uADF8\uB85C \uCD9C\uB825\uD558\uAE30 \uC704\uD574\uC11C
logging.level.org.hibernate.orm.jdbc.bind=trace
# Spring security의 로그 레벨을 설정
logging.level.org.springframework.security=info

# 업로드 크기 제한 설정(10MB)
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# S3
cloud.aws.region.static=ap-northeast-2
cloud.aws.stack.auto-=false


# AWS S3 accessKey & secretKey / kakao & google key 

# S3 accessKey & secretKey / 카카오 & 구글

cloud.aws.credentials.accessKey= AKIA6ODU7A2AKE2NQCUB
cloud.aws.credentials.secretKey= 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
cloud.aws.s3.bucket= domain-web-storage

#Kakao
## RestAPI Key
spring.security.oauth2.client.registration.kakao.client-id = c89a020dd130ee8b16d5aba0dc567c8e
## 보안
spring.security.oauth2.client.registration.kakao.client-secret = 4y1VfXKwb5ptBhsKKbhDUMN4LSxmtyTO
## 동의 설정된 정보
spring.security.oauth2.client.registration.kakao.scope = profile_nickname, profile_image
spring.security.oauth2.client.registration.kakao.client-name = Kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type = authorization_code
## 설정한 redirect 주소
spring.security.oauth2.client.registration.kakao.redirect-uri = http://localhost:8081/login/oauth2/code/kakao
spring.security.oauth2.client.registration.kakao.client-authentication-method = client_secret_post


spring.security.oauth2.client.provider.kakao.authorization-uri = https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri = https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri = https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute = id

#Google email
spring.mail.host=smtp.gmail.com
spring.mail.port=587
## 구글 아이디
spring.mail.username=dustn7020@gmail.com
## 구글 앱 비밀번호
spring.mail.password=bujm abih rpea kxyn
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.auth=true
